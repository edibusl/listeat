package com.listeat.models;

import javax.persistence.*;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.map.annotate.JsonSerialize;

@Entity
@Table(name = "glists")
@lombok.Data
@lombok.EqualsAndHashCode(exclude={"users", "gitems"}) //To prevent stack-overflow exception during commit due to circular dependencies
@lombok.ToString(of = "glist_id") //To prevent stack-overflow exception in any case when calling toString
@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
public class GList implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long glist_id;
    private String subject;
    private String description;

    @JsonIgnore @lombok.Getter(onMethod = @__(@JsonIgnore)) //To ignore this field when serializing to Json (A jackson's JsonIgnore field will be put on the setter that's generated by lombok)
    @ManyToMany
    @JoinTable(name = "glists_users",
            joinColumns = @JoinColumn(name = "glist_id", referencedColumnName = "glist_id"),
            inverseJoinColumns = @JoinColumn(name = "user_id", referencedColumnName = "user_id")
    )
    public List<User> users = new ArrayList<>();

    //To ignore this field when serializing to Json (A jackson's JsonIgnore field will be put on the setter that's generated by lombok)
    @JsonIgnore @lombok.Getter(onMethod = @__(@JsonIgnore))
    @OneToMany(mappedBy = "glist")
    public List<GItem> gitems;
}
